// <auto-generated />
using System;
using CrudPark_Back.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudPark_Back.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251017224819_AddVehicleTypeToRates")]
    partial class AddVehicleTypeToRates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("identification_number");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.gonzalez@email.com",
                            FullName = "María González",
                            IdentificationNumber = "1234567890",
                            IsActive = true,
                            Phone = "3001234567",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("customer_vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 1,
                            IsPrimary = true,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 1,
                            IsPrimary = false,
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.MonthlySubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxVehicles")
                        .HasColumnType("integer")
                        .HasColumnName("max_vehicles");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("SubscriptionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("subscription_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SubscriptionCode")
                        .IsUnique();

                    b.ToTable("monthly_subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 150000m,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 1,
                            EndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            MaxVehicles = 2,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            SubscriptionCode = "SUB-2025-001",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("operators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@crudpark.com",
                            FullName = "Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$kH3ulu5AEQGioyzXDx.pg.4JDqE9/mACqZbtdymRdAm.zgUN2rX7.",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "juan@crudpark.com",
                            FullName = "Juan Pérez",
                            IsActive = true,
                            PasswordHash = "$2a$11$a2ISYKBQqXw.27Xd8WwykOc9YpYSZCfKVvV/WqdEZ7c3mdAY4d88K",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "jperez"
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("PaymentDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("DailyCap")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("daily_cap");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<decimal>("FractionRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("fraction_rate");

                    b.Property<int>("GracePeriodMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("grace_period_minutes");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("hourly_rate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("RateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("rate_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id");

                    b.ToTable("rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyCap = 20000m,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FractionRate = 700m,
                            GracePeriodMinutes = 30,
                            HourlyRate = 2000m,
                            IsActive = true,
                            RateName = "Tarifa Motos 2025",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleType = "Motorcycle"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyCap = 30000m,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FractionRate = 1000m,
                            GracePeriodMinutes = 30,
                            HourlyRate = 3000m,
                            IsActive = true,
                            RateName = "Tarifa Carros 2025",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleType = "Car"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyCap = 50000m,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FractionRate = 1500m,
                            GracePeriodMinutes = 30,
                            HourlyRate = 5000m,
                            IsActive = true,
                            RateName = "Tarifa Camiones 2025",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleType = "Truck"
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("FinalCash")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("final_cash");

                    b.Property<decimal>("InitialCash")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("initial_cash");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_id");

                    b.Property<DateTime?>("ShiftEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shift_end");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shift_start");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("shifts");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.SubscriptionVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("subscription_vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            SubscriptionId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            SubscriptionId = 1,
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EntryDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_datetime");

                    b.Property<DateTime?>("ExitDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exit_datetime");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("folio");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_id");

                    b.Property<int?>("ParkingDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("parking_duration_minutes");

                    b.Property<string>("QrCodeData")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("qr_code_data");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("Folio")
                        .IsUnique();

                    b.HasIndex("OperatorId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            Color = "Blanco",
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicensePlate = "ABC123",
                            Model = "Corolla",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleType = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Yamaha",
                            Color = "Negro",
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicensePlate = "XYZ789",
                            Model = "FZ",
                            UpdatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleType = "Motorcycle"
                        });
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.CustomerVehicle", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudPark_Back.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.MonthlySubscription", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.Customer", "Customer")
                        .WithMany("MonthlySubscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Payment", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.Operator", "Operator")
                        .WithMany("Payments")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CrudPark_Back.Models.Entities.Ticket", "Ticket")
                        .WithMany("Payments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Shift", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.Operator", "Operator")
                        .WithMany("Shifts")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.SubscriptionVehicle", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.MonthlySubscription", "MonthlySubscription")
                        .WithMany("SubscriptionVehicles")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudPark_Back.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("SubscriptionVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MonthlySubscription");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Ticket", b =>
                {
                    b.HasOne("CrudPark_Back.Models.Entities.Operator", "Operator")
                        .WithMany("Tickets")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CrudPark_Back.Models.Entities.MonthlySubscription", "MonthlySubscription")
                        .WithMany("Tickets")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CrudPark_Back.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("Tickets")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MonthlySubscription");

                    b.Navigation("Operator");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");

                    b.Navigation("MonthlySubscriptions");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.MonthlySubscription", b =>
                {
                    b.Navigation("SubscriptionVehicles");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Operator", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Shifts");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Ticket", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CrudPark_Back.Models.Entities.Vehicle", b =>
                {
                    b.Navigation("CustomerVehicles");

                    b.Navigation("SubscriptionVehicles");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
